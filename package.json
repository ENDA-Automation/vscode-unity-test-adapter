{
  "name": "vscode-unity-test-adapter",
  "displayName": "Unity Framework for C Test Explorer",
  "description": "Run your Unity tests in the Sidebar of Visual Studio Code",
  "icon": "img/icon.png",
  "author": "Florin Popescu",
  "publisher": "fpopescu",
  "version": "0.0.4",
  "license": "MIT",
  "homepage": "https://github.com/Florin-Popescu/vscode-unity-test-adapter",
  "repository": {
    "type": "git",
    "url": "https://github.com/Florin-Popescu/vscode-unity-test-adapter.git"
  },
  "bugs": {
    "url": "https://github.com/Florin-Popescu/vscode-unity-test-adapter/issues"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "test",
    "testing"
  ],
  "main": "out/main.js",
  "scripts": {
    "clean": "rimraf out *.vsix",
    "build": "tsc",
    "watch": "tsc -w",
    "rebuild": "npm run clean && npm run build",
    "package": "vsce package",
    "publish": "vsce publish"
  },
  "dependencies": {
    "async-mutex": "^0.1.4",
    "tree-kill": "^1.2.2",
    "tsc": "^1.20150623.0",
    "tslib": "^1.9.3",
    "vscode-read-manifest": "^0.5.1",
    "vscode-test-adapter-api": "^1.7.0",
    "vscode-test-adapter-util": "^0.7.0"
  },
  "devDependencies": {
    "@types/node": "^14.6.0",
    "@types/vscode": "~1.23.0",
    "typescript": "^3.5.3",
    "vsce": "^1.65.0"
  },
  "engines": {
    "vscode": "^1.23.0"
  },
  "extensionDependencies": [
    "hbenl.vscode-test-explorer"
  ],
  "activationEvents": [
    "*"
  ],
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Unity Test Explorer",
      "properties": {
        "unityExplorer.debugConfiguration": {
          "description": "Configuration to run when debugging tests.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.prettyTestCaseRegex": {
          "markdownDescription": "Regular expression to be used to simplify the test case label which by default is the full function name. Put what you want to keep in a single matching group and the rest will be removed. Leave blank to disable this. E.g. To go from `test_BlinkTaskShouldToggleLed` to `BlinkTaskShouldToggleLed`, regular expression which could be used is `test_(\\w+)`.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.prettyTestFileRegex": {
          "markdownDescription": "Regular expression to be used to simplify the test file label which by default is the path relative to the source folder. Put what you want to keep in a single matching group and the rest will be removed. Leave blank to disable this. E.g. To go from `test/LEDs/test_BlinkTask.c` to `BlinkTask`, regular expression which could be used is `test_(\\w+)\\.c`.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.unitUnderTestFolder": {
          "description": "The path to the unit under test source files. By default the workspace root is used.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.unitUnderTestFileRegex": {
          "description": "Regular expression to find unit under test source files. These are tracked for changes to mark test results as old if not re-run.",
          "type": "string",
          "default": "\\w+\\.[ch]",
          "scope": "resource"
        },
        "unityExplorer.testSourceFolder": {
          "description": "The path to the unit test source files. By default the workspace root is used.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.testSourceFileRegex": {
          "description": "Regular expression to find test source files.",
          "type": "string",
          "default": "test_",
          "scope": "resource"
        },
        "unityExplorer.testCaseRegex": {
          "description": "Regular expression to find test cases in a file. The actual test case name must be put in a single matching group.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.preBuildCommand": {
          "markdownDescription": "Any command which must be run before building the unit tests. If empty, no command will be run.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.testBuildApplication": {
          "markdownDescription": "Application used to build the tests (e.g. `make`, `cmake`, `gcc`). A test will be built by running this and the test's file name, with the system's executable extension (i.e. `make unitTest.exe`).",
          "type": "string",
		  "default": "make",
          "scope": "resource"
        },
        "unityExplorer.testBuildCwdPath": {
          "description": "The current working directory where the build command will be run in. By default the workspace root is used.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.testBuildArgs": {
          "markdownDescription": "Any additional arguments that need to be passed to the build command when building a test. Note that the test executable target is already passed, so there is no need to add it here.",
          "type": "string",
          "scope": "resource"
        },
        "unityExplorer.testExecutableFolder": {
          "description": "The path to the built output files. By default the workspace root is used.",
          "type": "string",
          "scope": "resource"
        }
      }
    }
  }
}
